<% layout('layouts/boilerplate') %>



<body>

  <div id="store-products">
    <% for (let product of products){%>
      <div>
        <br />
        <a href="/products/<%= product._id%>"><img src="<%= product.image %> " alt="" class="product-thumb" /></a>
        <a href="/products/<%= product._id%>">
          <h2 class="title">
            <%= product.title %>
        </a></h2>
        <!-- <p>
          <%= product.subtitle %>
        </p> -->
        <p>$<%= product.price %>
        </p>
        <button class="cart-button-store" type="button">Cart</button>
        <button class="details-button-store">Details</button>
      </div>
      <%}%>
  </div>

  <footer>
<section class="container content-section">
  <h2 class="section-header">CART</h2>
  <div class="cart-row">
    <span class="cart-item cart-header cart-column">ITEM</span>
    <span class="cart-price cart-header cart-column">PRICE</span>
    <span class="cart-quantity cart-header cart-column">QUANTITY</span>
  </div>
  <div class="cart-items"></div>
  <div class="cart-total">
    <strong class="cart-total-title">Total</strong>
    <span class="cart-total-price">$0</span>
  </div>
  <button class="btn btn-primary btn-purchase" >
    Checkout
  </button>
</section>
  

  </footer>

  <script>

if (document.readyState == "loading") {
  document.addEventListener("DOMContentLoaded", ready);
} else {
  ready();
}

function ready() {
  const removeCartItemButtons = document.getElementsByClassName("btn-danger");
  for (let i = 0; i < removeCartItemButtons.length; i++) {
    let button = removeCartItemButtons[i];
    button.addEventListener("click", removeCartItem);
  }

  const quantityInputs = document.getElementsByClassName("cart-quantity-input");
  for (let i = 0; i < quantityInputs.length; i++) {
    let input = quantityInputs[i];
    input.addEventListener("change", quantityChanged);
  }

  const addToCartButtons = document.getElementsByClassName("cart-button-store");
  for (let i = 0; i < addToCartButtons.length; i++) {
    let button = addToCartButtons[i];
    button.addEventListener("click", addToCartClicked);
  }

  document
    .getElementsByClassName("btn-purchase")[0]
    .addEventListener("click", purchaseClicked('/products/checkout', { price: cartTotal })
  .then(data => {console.log(data)})
  )

function removeCartItem(event) {
  let buttonClicked = event.target;
  buttonClicked.parentElement.parentElement.remove();
  updateCartTotal();
}

function quantityChanged(event) {
  let input = event.target;
  if (isNaN(input.value) || input.value <= 0) {
    input.value = 1;
  }
  updateCartTotal();
}

function addToCartClicked(event) {
  let title = `${this.parentElement.children[3].innerText}`;
  let price = `${this.parentElement.children[4].innerText}`;
  let imageSrc = `${this.parentElement.children[1].children[0].src}`;
  addItemToCart(title, price, imageSrc);
  updateCartTotal();
}

function addItemToCart(title, price, imageSrc) {
  let cartRow = document.createElement("div");
  cartRow.classList.add("cart-row");
  let cartItems = document.getElementsByClassName("cart-items")[0];
  let cartItemNames = cartItems.getElementsByClassName("cart-item-title");
  for (let i = 0; i < cartItemNames.length; i++) {
    if (cartItemNames[i].innerText == title) {
      alert("This item is already added to the cart");
      return;
    }
  }
  const cartRowContents = `
        <div class="cart-item cart-column">
            <img class="cart-item-image" src="${imageSrc}" width="100" height="100">
            <span class="cart-item-title">${title}</span>
        </div>
        <span class="cart-price cart-column">${price}</span>
        <div class="cart-quantity cart-column">
            <input class="cart-quantity-input" type="number" value="1">
            <button class="btn btn-danger" type="button">REMOVE</button>
        </div>`;
  cartRow.innerHTML = cartRowContents;
  cartItems.append(cartRow);
  cartRow
    .getElementsByClassName("btn-danger")[0]
    .addEventListener("click", removeCartItem);
  cartRow
    .getElementsByClassName("cart-quantity-input")[0]
    .addEventListener("change", quantityChanged);
}

let cartTotal;

function updateCartTotal() {
  let cartItemContainer = document.getElementsByClassName("cart-items")[0];
  let cartRows = cartItemContainer.getElementsByClassName("cart-row");
  cartTotal = 0;
  for (let i = 0; i < cartRows.length; i++) {
    let cartRow = cartRows[i];
    let priceElement = cartRow.getElementsByClassName("cart-price")[0];
    let quantityElement = cartRow.getElementsByClassName(
      "cart-quantity-input"
    )[0];
    let price = parseFloat(priceElement.innerText.replace("$", ""));
    let quantity = quantityElement.value;
    cartTotal = cartTotal + price * quantity;
  }
  cartTotal = Math.round(cartTotal * 100) / 100;
  document.getElementsByClassName("cart-total-price")[0].innerText =
    "$" + cartTotal;
}

async function purchaseClicked(url = '', data = {}) {
  // Example POST method implementation:
  const response = await fetch(url, {
    method: 'POST', // *GET, POST, PUT, DELETE, etc.
    mode: 'cors', // no-cors, *cors, same-origin
    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
    credentials: 'same-origin', // include, *same-origin, omit
    headers: {
      'Content-Type': 'application/json'
      // 'Content-Type': 'application/x-www-form-urlencoded',
    },
    redirect: 'follow', // manual, *follow, error
    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
    body: JSON.stringify(data) // body data type must match "Content-Type" header
  });
  return response.json(); // parses JSON response into native JavaScript objects
}


    const details = document.querySelectorAll(".details-button-store");

    let obj;

    function getProducts() {fetch('/modal')
      .then(res => res.json())
      .then(data => obj = data)
    }

    function showModal(e){
          let title = `${this.parentElement.children[3].innerText}`;
          for (let i = 0; i < obj.products.length; i++){
            if (title == obj.products[i].title){
              Swal.fire({
              title: obj.products[i].subtitle,
            //text: `${this.parentElement.children[4].innerText}`,
            }) 
          }
        } 
      }

    window.addEventListener('DOMContentLoaded', getProducts);

    for (let detail of details) {
      detail.addEventListener('click', showModal)
    };

</script> 

  
</body>
  
<% layout('layouts/boilerplate') %>



<body>

  <script src="https://www.paypal.com/sdk/js?client-id=AaMcesOVIzWrsT_JHWU8DVt2rZb3aDR5TLuLD9qL_HYMUOTdHem3mVkcvc2E6f2Cqycew190cSanwBrA">
  </script>

  <div id="store-products">
    <% for (let product of products){%>
      <div>
        <br />
        <img src="<%= product.image %> " alt="" class="product-thumb" />
          <h2 class="title">
            <%= product.title %>
          </h2>
        <!-- <p>
          <%= product.subtitle %>
        </p> -->
        <p>$<%= product.price %>
        </p>
        <button class="details-button-store">Details</button>
        <% if (product.stockQty > 0) {%>
          <button class="cart-button-store" type="button">Cart</button>
        <%} else { %>
          <button class="cart-button-store" type="button">Sold Out</button>
       <%}%>
      </div>
  <%}%>
  </div>

  <footer>

  <section class="container content-section">
    <h2 class="section-header">CART</h2>
    <div class="cart-row">
      <span class="cart-item cart-header cart-column">ITEM</span>
      <span class="cart-price cart-header cart-column">PRICE</span>
      <span class="cart-quantity cart-header cart-column">QUANTITY</span>
    </div>
    <div class="cart-items"></div>
    <div class="cart-total">
      <strong class="cart-total-title subtotal">subtotal</strong>
      <span class="cart-subtotal-price">$0</span>

      <br>
      <strong class="cart-total-title shipping">shipping</strong>
      <span class="cart-shipping-price">$0</span>

      <br>
      <strong class="cart-total-title total">total</strong>
      <span class="cart-total-price">$0</span>
    </div>
    <button class="btn btn-primary btn-checkout" type="button">
      Checkout
    </button>
    <button class="btn btn-primary btn-keep-shopping" type="button">
      Keep Shopping
    </button>
    <div id="paypal-button-container"></div>
  </section>

  </footer>




  <script>

if (document.readyState == "loading") {
  document.addEventListener("DOMContentLoaded", ready);
} else {
  ready();
}

function ready() {

  const productsContainer = document.querySelector("#store-products");

  const removeCartItemButtons = document.getElementsByClassName("btn-danger");
  for (removeCartItemButton of removeCartItemButtons) {
    removeCartItemButton.addEventListener("click", removeCartItem);
  }

  const quantityInputs = document.getElementsByClassName("cart-quantity-input");
  for (quantityInput of quantityInputs) {
    quantityInput.addEventListener("change", quantityChanged);
  }

  const addToCartButtons = document.getElementsByClassName("cart-button-store");
  for (addToCartButton of addToCartButtons) {
    addToCartButton.addEventListener("click", addToCartClicked);
  }

  for (addToCartButton of addToCartButtons){
    if (addToCartButton.innerText === "Sold Out"){
      addToCartButton.parentElement.style.opacity = 1 ;
      addToCartButton.parentElement.style.backgroundColor = "gainsboro";
      addToCartButton.disabled = true;
      

    }
  }
  

  const details = document.querySelectorAll(".details-button-store");
  for (let detail of details) {
    detail.addEventListener("click", showModal);
  }

  const paypalButtonContainer = document.querySelector(
    "#paypal-button-container"
  );

  const checkoutButton = document.getElementsByClassName("btn-checkout")[0];

  checkoutButton.addEventListener("click", checkoutClicked);

  const keepShoppingButton = document.getElementsByClassName(
    "btn-keep-shopping"
  )[0];

  keepShoppingButton.addEventListener("click", keepShoppingClicked);

  keepShoppingButton.style.display = "none";


  function keepShoppingClicked() {
    console.log(cartContents);

    productsContainer.style.display = "flex";

    checkoutButton.style.display = "block";

    keepShoppingButton.style.display = "none";

    for (removeCartItemButton of removeCartItemButtons) {
      removeCartItemButton.style.display = "block";
    }

    for (quantityInput of quantityInputs) {
      quantityInput.readOnly = "";
    }

    paypalButtonContainer.innerHTML = "";
  }

  function checkoutClicked() {  
    
    if(document.querySelector(".cart-total-price").innerText === "$0"){
      Swal.fire(
        "There is nothing in the cart"
      )
    } else {
      let paypalItems = [];
      let name = "";
      let unit_amount = {
      currency_code: "USD",
      value: 0
      };
      let quantity = 0;

    function paypalItem(name, unit_amount, quantity){
      this.name = cartContent.title;
      this.unit_amount = {
      currency_code: "USD",
      value: cartContent.price
      };
      this.quantity = cartContent.quantity;
    }

    for (cartContent of cartContents){
      paypalItems.push(new paypalItem(name, unit_amount, quantity))
    }

    console.log(paypalItems);

 
    function checkoutDbUpdate(){
        fetch('/products', {
        headers: { "Content-Type": "application/json" },
        method: 'PUT',
        body: JSON.stringify(cartContents)
      }); 
    }

    paypal.Buttons({
      createOrder: function (data, actions) {
            return actions.order.create({
              purchase_units: [
                {
                  description: "Andrew Altman Merch",
                  amount: { currency_code: "USD", value: cartTotal, breakdown: {
                        item_total: {
                            currency_code: "USD",
                            value: cartSubtotal
                        },
                        shipping: {
                            currency_code: "USD",
                            value: shipping
                        }
                    } 
                  },
                  items: paypalItems
                },
              ],
            });
          },
        onApprove: function(data, actions) {
          return actions.order.capture().then(
            checkoutDbUpdate()
          ).then(() => {
            window.location.href = "/products/thanks";
          });
        }
      }).render('#paypal-button-container'); 

    productsContainer.style.display = "none";

    checkoutButton.style.display = "none";

    keepShoppingButton.style.display = "block";

    for (quantityInput of quantityInputs) {
      quantityInput.readOnly = "readonly";
    }

    for (removeCartItemButton of removeCartItemButtons) {
      removeCartItemButton.style.display = "none";
    }
  }
}

  function removeCartItem(event) {
    let buttonClicked = event.target;
    buttonClicked.parentElement.parentElement.remove();
    updateCart();
  }

  function quantityChanged(event) {
    let input = event.target;
    let title = `${this.parentElement.parentElement.children[0].children[1].innerText}`;
    for (let i = 0; i < obj.products.length; i++){
          if (title == obj.products[i].title && input.value > obj.products[i].stockQty){
          Swal.fire(
            `There are only ${obj.products[i].stockQty} left in stock`);
          input.value = 1;
          updateCart();
        } else if (input.value <= obj.products[i].stockQty){
          updateCart();
        }
    }
    if (isNaN(input.value) || input.value <= 0) {
        input.value = 1;
        updateCart();
  }
}


  function addToCartClicked(event) {
    let title = `${this.parentElement.children[2].innerText}`;
    let price = `${this.parentElement.children[3].innerText}`;
    let imageSrc = `${this.parentElement.children[1].src}`;
    addItemToCart(title, price, imageSrc);
    updateCart();
  }

  function addItemToCart(title, price, imageSrc) {
    let cartRow = document.createElement("div");
    cartRow.classList.add("cart-row");
    let cartItems = document.getElementsByClassName("cart-items")[0];
    let cartItemNames = cartItems.getElementsByClassName("cart-item-title");
    for (cartItemName of cartItemNames) {
      if (cartItemName.innerText == title) {
        alert("This item is already added to the cart");
        return;
      }
    }
    const cartRowContents = `
          <div class="cart-item cart-column">
              <img class="cart-item-image" src="${imageSrc}" width="100" height="100">
              <span class="cart-item-title">${title}</span>
          </div>
          <span class="cart-price cart-column">${price}</span>
          <div class="cart-quantity cart-column">
              <input class="cart-quantity-input" type="number" value="1">
              <button class="btn btn-danger" type="button">REMOVE</button>
          </div>`;
    cartRow.innerHTML = cartRowContents;
    cartItems.append(cartRow);
    cartRow
      .getElementsByClassName("btn-danger")[0]
      .addEventListener("click", removeCartItem);
    cartRow
      .getElementsByClassName("cart-quantity-input")[0]
      .addEventListener("change", quantityChanged);
  }

  // let cartSubtotal = 0;
  // let shipping = 0;
  // let cartTotal = 0;
  let cartContents = [];

  function updateCart() {
    function cartItem(title, price, quantity) {
      this.title = title;
      this.price = price;
      this.quantity = quantity;
    }

    cartContents.splice(0, cartContents.length);

    let cartItemContainer = document.getElementsByClassName("cart-items")[0];
    let cartRows = cartItemContainer.getElementsByClassName("cart-row");
    cartSubtotal = 0;
    shipping = 0;
    for (cartRow of cartRows) {
      let titleElement = cartRow.getElementsByClassName("cart-item-title")[0];
      let priceElement = cartRow.getElementsByClassName("cart-price")[0];
      let quantityElement = cartRow.getElementsByClassName(
        "cart-quantity-input"
      )[0];
      let title = titleElement.innerText;
      let price = parseFloat(priceElement.innerText.replace("$", ""));
      let quantity = quantityElement.value;
      cartContents.push(new cartItem(title, price, quantity));
      cartSubtotal = Math.round(cartSubtotal * 100) / 100;
      cartSubtotal = cartSubtotal + price * quantity;
     
    }

    for (let cartContent of cartContents) {
      if (cartContent.title.includes("Vinyl")) {
        shipping = 5;
        break;
      } else if (cartContent.title.includes("Test")){
        shipping = 0.01;
        break;
      }
      else {
        shipping = 3;
      }
    }

    cartTotal = `${cartSubtotal + shipping}`;

    document.getElementsByClassName("cart-subtotal-price")[0].innerText =
      "$" + cartSubtotal;
    document.getElementsByClassName("cart-shipping-price")[0].innerText =
      "$" + shipping;
    document.getElementsByClassName("cart-total-price")[0].innerText =
      "$" + cartTotal;

    console.log(cartContents);
  }

  let obj;

  function getProducts() {
    fetch("/modal")
      .then((res) => res.json())
      .then((data) => (obj = data));
  }

  function showModal(e) {
    let title = `${this.parentElement.children[2].innerText}`;
    for (let i = 0; i < obj.products.length; i++) {
      if (title == obj.products[i].title) {
        Swal.fire({
          title: obj.products[i].subtitle,
          //text: `${this.parentElement.children[4].innerText}`,
        });
      }
    }
  }

  window.addEventListener("DOMContentLoaded", getProducts);
}


  
</script>

  
</body>
  